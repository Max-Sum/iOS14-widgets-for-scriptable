{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "car"
  },
  "name" : "SL03LockScreenWidget",
  "script" : "\n\n\/**\n * iOS widget(锁屏) --- 长安深蓝SL03电量\n * 联系邮箱: zhangkunyuan@hotmail.com\n * 项目地址: https:\/\/github.com\/zkytech\/iOS14-widgets-for-scriptable\n *\n * 传入以下参数: refresh_token,模式\n *    其中\"模式\"为可选参数，值为：油\/电 ,默认为电。\n * \n * \n * 参数获取方法见文档: https:\/\/gitee.com\/zkytech\/iOS14-widgets-for-scriptable#4-%E6%B7%B1%E8%93%9Dsl03%E8%BD%A6%E8%BE%86%E7%8A%B6%E6%80%81\n * - 组件依赖深蓝APP登录信息（refresh_token）\n * - 本组件仅用于学习交流\n * - 本组件为开源软件，不会进行收费！！！\n *\n * \n * - 不要在脚本里填token，所有参数必须通过组件设置界面填写\n *\/\n\/\/ 开发时切换到dev分支\nconst branch = \"master\"\nconst force_download = branch != \"master\"\n\/\/ Boxjs自动获取token，需配合Quantumult X使用\n\nconst {\n    getCarId,\n    getToken,\n    refreshCarData,\n    getCarStatus,\n    getCarInfo,\n    getCarLocation,\n  } = await getService(\n    \"SL03Api\",\n    `https:\/\/gitee.com\/zkytech\/iOS14-widgets-for-scriptable\/raw\/${branch}\/scripts\/lib\/service\/SL03Api.js`,\n    force_download\n  );\n  const { update } = await getService(\n    \"UpdateScript\",\n    `https:\/\/gitee.com\/zkytech\/iOS14-widgets-for-scriptable\/raw\/${branch}\/scripts\/lib\/service\/UpdateScript.js`,\n    force_download\n  );\n  const { drawArc } = await getService(\n    \"DrawShape\",\n    `https:\/\/gitee.com\/zkytech\/iOS14-widgets-for-scriptable\/raw\/${branch}\/scripts\/lib\/service\/DrawShape.js`,\n    force_download\n  );\nif(branch == \"master\"){\n  await update(`https:\/\/gitee.com\/zkytech\/iOS14-widgets-for-scriptable\/raw\/${branch}\/scripts\/SL03LockScreenWidget.js`)\n}\n\nconst params = args.widgetParameter ? args.widgetParameter.split(\",\") : [\"\"];\nconst param_refresh_token = params.length > 0 ? params[0].trim() : \"\";\nlet mode = \"电\";\nif(params.length > 1) mode = params[1].trim() == \"油\"?\"油\":\"电\";\nconst LW = new ListWidget(); \/\/ widget对象\n\n\nconst token = await getToken(param_refresh_token);\nconst car_id = await getCarId(token);\nconst car_status = await getCarStatus(token, car_id);\nif(car_status && car_id){\n  \/\/ 剩余电量\n  const remain_power =car_status.remainPower ==undefined || car_status.remainPower < 0 ? 0 : car_status.remainPower;\n  const remained_oil_mile = car_status.RemainedOilMile\n  const remain_oil = (remained_oil_mile == undefined || remained_oil_mile < 0 ? 0:remained_oil_mile) \/ 846 * 100\n\n\n  const circle = await drawArc(LW, mode == \"电\" ? remain_power : remain_oil);\n  const car_symbol_name = mode == \"电\" ? \"car.rear.fill\" : \"fuelpump.fill\"\n  const sf_car = circle.addImage(SFSymbol.named(car_symbol_name).image );\n  sf_car.imageSize = new Size(26, 26);\n  sf_car.tintColor = Color.white();\n}\n\nif (token == \"\" || token == null || token == undefined){\n  console.error(\"请先配置refresh_token\");\n  LW.addText(\"请先配置refresh_token\");\n}\n\n\nLW.presentAccessoryCircular();\n\nScript.setWidget(LW);\nScript.complete();\n\nasync function loadText(textUrl) {\n  const req = new Request(textUrl);\n  return await req.load();\n}\n\nasync function getService(name, url, force_download) {\n  let fm \n  try{\n    fm = FileManager.iCloud();\n  }catch{\n    fm = FileManager.local();\n  }\n  const script_dir = module.filename.replace(\n    fm.fileName(module.filename, true),\n    \"\"\n  );\n  let service_dir = fm.joinPath(script_dir, \"lib\/service\/\" + name);\n\n  if (!fm.fileExists(service_dir)) {\n    fm.createDirectory(service_dir, true);\n  }\n\n  let lib_file = fm.joinPath(script_dir, \"lib\/service\/\" + name + \"\/index.js\");\n\n  if (fm.fileExists(lib_file) && !force_download) {\n    try{\n      fm.downloadFileFromiCloud(lib_file);\n    }catch(e){\n\n    }\n  } else {\n    \/\/ download once\n    let indexjs = await loadText(url);\n    fm.write(lib_file, indexjs);\n  }\n\n  let service = importModule(\"lib\/service\/\" + name);\n\n  return service;\n}\n\n",
  "share_sheet_inputs" : [

  ]
}