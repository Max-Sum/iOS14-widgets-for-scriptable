{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "blue",
    "glyph" : "car"
  },
  "name" : "SL03Widget",
  "script" : "\/**\n * iOS widget --- 长安深蓝SL03桌面组件 & 锁屏组件\n * 项目地址: https:\/\/github.com\/zkytech\/iOS14-widgets-for-scriptable\n * 联系邮箱: zhangkunyuan@hotmail.com\n *\n *\n * 参数获取和填写方法见文档: https:\/\/public.zkytech.top\/iOS14-widgets-for-scriptable#4-%E6%B7%B1%E8%93%9Dsl03%E8%BD%A6%E8%BE%86%E7%8A%B6%E6%80%81\n * - 组件依赖深蓝APP登录信息（refresh_token）\n * - 本组件仅用于学习交流\n * - 本组件为开源软件，不会进行收费！！！\n *\n *\n * - 不要在脚本代码里修改任何参数，所有参数必须通过组件设置界面填写\n *\/\ntry {\n  \/\/ 开发环境切换到dev分支，生产环境用master分支\n  const branch = \"master\";\n  const project_name = \"深蓝小组件_by_zkytech\";\n  \/\/ const force_download = branch != \"master\";\n  const force_download = true;\n  const url_scheme = \"qiyuancar:\/\/\";\n\n\n  class WidgetTheme {\n    constructor(\n      name,\n      backgroundGradient,\n      primaryTextColor,\n      secondaryTextColor\n    ) {\n      this.name = name;\n      this.backgroundGradient = backgroundGradient;\n      this.primaryTextColor = primaryTextColor;\n      this.secondaryTextColor = secondaryTextColor;\n    }\n  }\n\n  function getGradient(colors, locations) {\n    const gradient = new LinearGradient();\n    gradient.colors = colors;\n    gradient.locations = locations;\n    return gradient;\n  }\n\n  const themes = [\n    new WidgetTheme(\n      \"跟随系统\",\n      getGradient([Color.dynamic(Color.white(), Color.black())], [1]),\n      Color.dynamic(Color.black(), Color.white()),\n      Color.dynamic(new Color(\"#4b4b4b\"), new Color(\"#bfbfbf\"))\n    ),\n    new WidgetTheme(\n      \"白色主题\",\n      getGradient([Color.white()], [1]),\n      Color.black(),\n      new Color(\"#4b4b4b\")\n    ),\n    new WidgetTheme(\n      \"黑色主题\",\n      getGradient([Color.black()], [1]),\n      Color.white(),\n      new Color(\"#bfbfbf\")\n    ),\n    new WidgetTheme(\n      \"跟随系统(渐变)\",\n      getGradient(\n        [\n          Color.dynamic(Color.white(), Color.black()),\n          Color.dynamic(new Color(\"#ced6e0\"), new Color(\"#2f3542\")),\n        ],\n        [0, 1]\n      ),\n      Color.dynamic(Color.black(), Color.white()),\n      Color.dynamic(new Color(\"#4b4b4b\"), new Color(\"#bfbfbf\"))\n    ),\n    new WidgetTheme(\n      \"白色主题(渐变)\",\n      getGradient([Color.white(), new Color(\"#ced6e0\")], [0, 1]),\n      Color.black(),\n      new Color(\"#4b4b4b\")\n    ),\n    new WidgetTheme(\n      \"黑色主题(渐变)\",\n      getGradient([Color.black(), new Color(\"#2f3542\")], [0, 1]),\n      Color.white(),\n      new Color(\"#bfbfbf\")\n    ),\n    new WidgetTheme(\n      \"EVA初号机主题\",\n      getGradient([new Color(\"#6c5ce7\")], [1]),\n      new Color(\"#00b894\"),\n      new Color(\"#00b894\")\n    ),\n  ];\n\n  const {\n    getCarId,\n    getToken,\n    refreshCarData,\n    getBalanceInfo,\n    getCarStatus,\n    getCarInfo,\n    getCarLocation,\n    getChargeStatus,\n  } = await getService(\n    \"SL03Api\",\n    `https:\/\/public.zkytech.top\/iOS14-widgets-for-scriptable\/lib\/service\/SL03Api.js`,\n    force_download\n  );\n  const { update } = await getService(\n    \"UpdateScript\",\n    `https:\/\/public.zkytech.top\/iOS14-widgets-for-scriptable\/lib\/service\/UpdateScript.js`,\n    force_download\n  );\n  let { getDataFromSettings, saveDataToSettings } = await getService(\n    \"Settings\",\n    `https:\/\/public.zkytech.top\/iOS14-widgets-for-scriptable\/lib\/service\/Settings.js`,\n    force_download\n  );\n  function getSetting(key) {\n    return getDataFromSettings(project_name, key);\n  }\n  function saveSetting(key, value) {\n    return saveDataToSettings(project_name, key, value);\n  }\n\n  if (branch == \"master\") {\n    \/\/ 更新组件代码\n    await update(\n      `https:\/\/public.zkytech.top\/iOS14-widgets-for-scriptable\/SL03Widget.js`\n    );\n  }\n\n  if (config.runsInWidget) {\n    try {\n      switch (config.widgetFamily) {\n        case \"medium\":\n          await renderMediumWidget();\n          break;\n        case \"accessoryCircular\":\n          await renderAccessoryCircularWidget();\n          break;\n        default:\n          await renderWrongSizeAlert();\n          break;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  } else {\n    \/\/ 在Scriptable中运行，弹出设置窗口\n    await askSettings();\n  }\n\n  \/**\n   * 小号锁屏组件\n   * 接受参数 - 显示模式，油\/电\n   *\/\n  async function renderAccessoryCircularWidget() {\n    const { drawArc } = await getService(\n      \"DrawShape\",\n      `https:\/\/public.zkytech.top\/iOS14-widgets-for-scriptable\/lib\/service\/DrawShape.js`,\n      force_download\n    );\n    const params = args.widgetParameter\n      ? args.widgetParameter.split(\",\")\n      : [\"\"];\n    let mode = \"电\";\n    if (params.length >= 1) mode = params[0].trim() == \"油\" ? \"油\" : \"电\";\n    const LW = new ListWidget(); \/\/ widget对象\n    LW.url = url_scheme;\n    let token;\n    let refresh_token = getRefreshToken();\n    const token_result = await getToken(refresh_token);\n    if (token_result == null) {\n      token = null;\n    } else {\n      refresh_token = token_result.refresh_token;\n      token = token_result.access_token;\n      if (\n        refresh_token != \"\" &&\n        refresh_token != undefined &&\n        refresh_token != null\n      ) {\n        console.log(\"保存新的refresh_token\");\n        saveSetting(\"refresh_token\", refresh_token);\n      }\n    }\n\n    const car_id = await getCarId(token);\n    const car_status = await getCarStatus(token, car_id);\n    const charge_status = await getChargeStatus(token, car_id);\n    \/\/ 可以确定 状态码3 = “未充电”\n    \/\/ 状态码1 = “充电中”\n    \/\/ 状态码2 目前未知\n    const is_charging = charge_status.chrgStatus == \"1\";\n    if (car_status && car_id) {\n      \/\/ 剩余电量\n      let remain_power =\n        car_status.remainPower == undefined || car_status.remainPower < 0\n          ? 0\n          : car_status.remainPower;\n      let remained_oil_mile = car_status.RemainedOilMile;\n      \/\/ 增程车型存在API数据错乱的问题，为了避免受到API错误数据的影响自动取上一次获取到的合理数据\n      if (remain_power && remain_power > 0) {\n        saveSetting(\"remain_power\", remain_power);\n      } else {\n        remain_power = getSetting(\"remain_power\");\n        remain_power = remain_power ? remain_power : 0;\n      }\n      if (remained_oil_mile && remained_oil_mile > 0) {\n        saveSetting(\"remained_oil_mile\", remained_oil_mile);\n      } else {\n        remained_oil_mile = getSetting(\"remained_oil_mile\");\n        remained_oil_mile = remained_oil_mile ? remained_oil_mile : 0;\n      }\n\n      const remain_oil = (remained_oil_mile \/ 846) * 100;\n      const circle = await drawArc(\n        LW,\n        mode == \"电\" ? remain_power : remain_oil\n      );\n\n      const car_symbol_name =\n        mode == \"电\"\n          ? is_charging\n            ? \"bolt.car.fill\"\n            : \"car.rear.fill\"\n          : \"fuelpump.fill\";\n      \/\/ const sf_car = circle.addImage(SFSymbol.named(car_symbol_name).image);\n      const sf_car = circle.addImage(await loadImage(\"锁屏车\"));\n\n      sf_car.imageSize = new Size(29, 29);\n      sf_car.tintColor = Color.white();\n    }\n\n    if (token == \"\" || token == null || token == undefined) {\n      console.error(\"请先配置refresh_token\");\n      LW.addText(\"请先配置refresh_token\");\n    }\n\n    LW.presentAccessoryCircular();\n\n    Script.setWidget(LW);\n    Script.complete();\n  }\n\n  \/**\n   * 中等桌面组件\n   * 接受参数 - refresh_token\n   *\/\n  async function renderMediumWidget() {\n    const params = args.widgetParameter\n      ? args.widgetParameter.split(\",\")\n      : [\"\"];\n    const theme = getTheme();\n    param_refresh_token = params.length > 0 ? params[0].trim() : \"\";\n    if (param_refresh_token && !getRefreshToken()) {\n      saveSetting(\"refresh_token\", param_refresh_token);\n    }\n    const LW = new ListWidget(); \/\/ widget对象\n    LW.url = url_scheme;\n    LW.backgroundGradient = theme.backgroundGradient;\n    let token;\n    let refresh_token = getRefreshToken();\n    const token_result = await getToken(refresh_token);\n    if (token_result == null) {\n      token = null;\n    } else {\n      refresh_token = token_result.refresh_token;\n      token = token_result.access_token;\n      if (\n        refresh_token != \"\" &&\n        refresh_token != undefined &&\n        refresh_token != null\n      ) {\n        console.log(\"保存新的refresh_token\");\n        saveSetting(\"refresh_token\", refresh_token);\n      }\n    }\n    const car_id = await getCarId(token);\n    \/\/ await refreshCarData()\n    const car_status = await getCarStatus(token, car_id);\n    const car_info = await getCarInfo(token, car_id);\n    const car_location = await getCarLocation(token, car_id);\n    const charge_status = await getChargeStatus(token, car_id);\n    const balance_info = await getBalanceInfo(token, car_id);\n    if (car_status != null && car_info != null && car_location != null) {\n      \/\/ 数据更新时间\n      const update_time = car_status.terminalTime;\n      \/\/ 总里程\n      const total_odometer = Math.round(car_status.totalOdometer);\n      \/\/ 车内温度\n      const vehicle_temperature = Math.round(car_status.vehicleTemperature);\n      \/\/ 剩余里程\n      let remained_power_mile = Math.round(car_status.remainedPowerMile);\n      \/\/ 剩余电量\n      let remain_power = Math.round(car_status.remainPower);\n      \/\/ 车辆名称\n      const car_name = car_info.carName;\n      \/\/ 车辆配置名称，比如：515km\n      const conf_name = car_info.confName\n        ? car_info.confName.split(\"，\")[2]\n        : \"\";\n      \/\/ 车牌号\n      const plate_number = car_info.plateNumber;\n      \/\/ 型号\n      const series_name = car_info.seriesName;\n      \/\/ 车辆位置\n      const location_str = car_location.addrDesc;\n      \/\/ 车门状态\n      const lock_status =\n        car_status.driverDoorLock == 0 && car_status.passengerDoorLock == 0;\n      \/\/ 是否为增程车型\n      const is_mix = car_status.remainedOilMile != undefined;\n      \/\/ 是否在充电\n      const is_charging = charge_status.chrgStatus != \"3\";\n      \/\/ 经度\n      const lng = car_location.lng;\n      \/\/ 纬度\n      const lat = car_location.lat;\n      \/\/ 增程油箱续航里程\n      let remained_oil_mile = is_mix\n        ? Math.round(car_status.remainedOilMile)\n        : 0;\n      \/\/ 增程车型存在API数据错乱的问题，这里为了受到API错误数据的影响自动取上一次获取到的合理数据\n      if (remain_power && remain_power > 0) {\n        saveSetting(\"remain_power\", remain_power);\n      } else {\n        remain_power = getSetting(\"remain_power\");\n        remain_power = remain_power ? remain_power : 0;\n      }\n      if (remained_power_mile && remained_power_mile > 0) {\n        saveSetting(\"remained_power_mile\", remained_power_mile);\n      } else {\n        remained_power_mile = getSetting(\"remained_power_mile\");\n        remained_power_mile = remained_power_mile ? remained_power_mile : 0;\n      }\n      if (remained_oil_mile && remained_oil_mile > 0) {\n        saveSetting(\"remained_oil_mile\", remained_oil_mile);\n      } else {\n        remained_oil_mile = getSetting(\"remained_oil_mile\");\n        remained_oil_mile = remained_oil_mile ? remained_oil_mile : 0;\n      }\n      \/\/ 剩余油量\n      const remain_oil = (remained_oil_mile \/ 846) * 100;\n      \/\/ 综合续航(增程)\n      const total_mixed_mile = remained_power_mile + remained_oil_mile;\n      \/\/ 剩余流量\n      const remained_packet_size = Math.round(balance_info[0].left);\n      \/\/ 剩余流量单位\n      const remained_packet_size_unit = balance_info[0].totalUnit;\n\n      const widget_data_map = {\n        电池续航: {\n          value: remained_power_mile,\n          unit: \"km\",\n        },\n        油箱续航: {\n          value: remained_oil_mile,\n          unit: \"km\",\n        },\n        剩余电量: {\n          value: remain_power,\n          unit: \"%\"\n        },\n        剩余油量: {\n          value: remain_oil,\n          unit: \"%\"\n        },\n        总里程: {\n          value: total_odometer,\n          unit: \"km\",\n        },\n        综合续航: {\n          value: total_mixed_mile,\n          unit: \"km\",\n        },\n        温度: {\n          value: vehicle_temperature,\n          unit: \"°C\",\n        },\n        位置: {\n          value: location_str,\n          unit: \"\",\n          url: `iosamap:\/\/path?sourceApplication=SL03Widget&dlat=${lat}&dlon=${lng}`,\n        },\n        剩余流量: {\n          value: remained_packet_size,\n          unit: remained_packet_size_unit,\n        },\n      };\n\n      \/\/const power_img = LW.addImage(drawPowerImage(remain_power,remained_power_mile))\n      \/\/power_img.cornerRadius=5\n      \/\/power_img.imageSize=new Size(300,18)\n      \/**\n        |    col0 |   col1_0|   col1_1 |\n        |---------|---------|----------|\n        |         | 总里程   | 续航里程  |\n        | 车辆图片 |  xxxkm |   xxkm   |\n        |         | t_space0| t_space1  |\n        | ------- |----------|---------|\n        | 车辆名称 |  温度     | 位置     |\n        | ------- | xx摄氏度. | xxx省xxx市 |\n        |         | t_space2 | t_space3  |\n        | 车牌号   |---------------------｜\n        |        | 数据更新时间          |\n        | col0   |        col1           |\n    *\/\n      const container = LW.addStack();\n      container.layoutHorizontally();\n      container.spacing = 15;\n      \/\/ 第1列\n      const col0 = container.addStack();\n      col0.layoutVertically();\n      col0.spacing = 6;\n      col0.size = new Size(110, 0);\n      \/\/ 车辆图片\n      const car_img = await loadImage(\"车\");\n      const car_stack = col0.addStack();\n\n      const img_container = car_stack.addImage(car_img);\n\n      img_container.imageSize = new Size(100, 50);\n      \/\/ 车辆名称、型号\n      const car_name_container = col0.addStack();\n\n      car_name_container.layoutHorizontally();\n      car_name_container.spacing = 3;\n      car_name_container.bottomAlignContent();\n\n      \/\/ 车辆名称\n      const car_name_text = car_name_container.addText(car_name);\n      car_name_text.font = Font.boldSystemFont(15);\n      car_name_text.textColor = theme.primaryTextColor;\n      car_name_text.shadowColor = theme.secondaryTextColor;\n      car_name_text.shadowRadius = 1;\n      car_name_text.shadowOffset = new Point(1, 1);\n\n      \/\/car_name_text.minimumScaleFactor = 1\n      const lock_icon = car_name_container.addImage(\n        lock_status\n          ? SFSymbol.named(\"lock.fill\").image\n          : SFSymbol.named(\"lock.open.fill\").image\n      );\n      const charge_icon = car_name_container.addImage(\n        SFSymbol.named(\"bolt.fill\").image\n      );\n      \/\/ = SFSymbol.named(\"lock.open.fill\")\n      lock_icon.tintColor = lock_status\n        ? new Color(\"#27ae60\")\n        : new Color(\"#c0392b\");\n      charge_icon.tintColor = is_charging ? new Color(\"#27ae60\") : Color.gray();\n      lock_icon.imageSize = new Size(15, 15);\n      charge_icon.imageSize = new Size(15, 15);\n      const car_seires_container = col0.addStack();\n      \/\/ 车辆logo\n      const logo = car_seires_container.addImage(await loadImage(\"LOGO\"));\n      logo.imageSize = new Size(12, 12);\n      \/\/ 车辆型号\n      const user_defined_series_name = getSetting(\"car_series_name\");\n      const car_series_text = car_seires_container.addText(\n        user_defined_series_name\n          ? user_defined_series_name\n          : series_name + \" \" + conf_name\n      );\n      car_series_text.font = Font.mediumSystemFont(11);\n      car_series_text.textColor = theme.secondaryTextColor;\n      \/\/car_series_text.minimumScaleFactor = 0.5\n\n      \/\/ 车牌号\n      const plate_number_text = col0.addText(plate_number);\n      plate_number_text.font = Font.thinMonospacedSystemFont(10);\n      plate_number_text.textColor = theme.secondaryTextColor;\n      \/\/car_series_text.minimumScaleFactor = 0.5\n\n      \/\/ 第2列\n      const col1 = container.addStack();\n\n      col1.layoutVertically();\n      col1.spacing = 8;\n      const col1_row0 = col1.addStack();\n      const col1_row1 = col1.addStack();\n      col1_row1.layoutHorizontally();\n      col1_row1.spacing = 5;\n\n      const refresh_icon = col1_row1.addImage(\n        SFSymbol.named(\"arrow.clockwise\").image\n      );\n      refresh_icon.tintColor = theme.secondaryTextColor;\n      refresh_icon.imageSize = new Size(13, 13);\n      const refresh_time_text = col1_row1.addText(update_time);\n      refresh_time_text.textColor = theme.secondaryTextColor;\n      refresh_time_text.font = Font.thinMonospacedSystemFont(13);\n\n      col1_row0.layoutHorizontally();\n      col1_row0.spacing = 15;\n      const col1_row0_row0 = col1_row0.addStack();\n      const col1_row0_row1 = col1_row0.addStack();\n      col1_row0_row0.layoutVertically();\n      col1_row0_row1.layoutVertically();\n      col1_row0_row0.spacing = 8;\n      col1_row0_row1.spacing = 8;\n      const t_space0 = col1_row0_row0.addStack();\n      const t_space2 = col1_row0_row0.addStack();\n      const t_space1 = col1_row0_row1.addStack();\n      const t_space3 = col1_row0_row1.addStack();\n      const space_list = [t_space0, t_space1, t_space2, t_space3];\n      space_list.map((space, i) => {\n        space.layoutVertically();\n        const data_key = getWiegetDataSpaceName(i, is_mix);\n\n        \/\/ 标题\n        const header_stack = space.addText(data_key);\n        \/\/ 数据容器\n        const content_container = space.addStack();\n        content_container.spacing = 5;\n        content_container.bottomAlignContent();\n        \/\/ 数据-值\n        const content_stack = content_container.addText(\n          widget_data_map[data_key].value + \"\"\n        );\n        \/\/ 数据-单位\n        const unit_stack = content_container.addText(\n          widget_data_map[data_key].unit + \"\"\n        );\n        \/\/ 跳转地址\n        if (widget_data_map[data_key].url) {\n          space.url = widget_data_map[data_key].url;\n        }\n        header_stack.font = Font.thinMonospacedSystemFont(12);\n        header_stack.textColor = theme.secondaryTextColor;\n        content_stack.font = Font.boldSystemFont(18);\n        content_stack.textColor = theme.primaryTextColor;\n        content_stack.minimumScaleFactor = 0.3;\n        unit_stack.font = Font.mediumMonospacedSystemFont(14);\n        unit_stack.textColor = theme.secondaryTextColor;\n      });\n\n      const background_image = await loadImage(\"背景图\");\n      background_image ? (LW.backgroundImage = background_image) : null;\n    }\n    if (token == \"\" || token == null || token == undefined) {\n      console.error(\"请先配置refresh_token\");\n      const t = LW.addText(\n        \"请先在scriptable app中直接运行此脚本并配置refresh_token\"\n      );\n      t.font = Font.boldSystemFont(18);\n      t.textColor = Color.red();\n    }\n    console.log(\"渲染结束\");\n    await LW.presentMedium();\n    Script.setWidget(LW);\n    Script.complete();\n  }\n  function getFileManager() {\n    let fm;\n    try {\n      fm = FileManager.iCloud();\n      fm.documentsDirectory();\n    } catch {\n      fm = FileManager.local();\n    }\n    return fm;\n  }\n\n  async function renderWrongSizeAlert() {\n    const LW = new ListWidget();\n    const alert_text = LW.addText(\n      \"本组件只支持中等大小，请重新添加中等大小桌面组件\"\n    );\n    alert_text.textColor = Color.red();\n    LW.present();\n    Script.setWidget(LW);\n    Script.complete();\n  }\n\n  function getImageDir() {\n    const fm = getFileManager();\n    const script_dir = fm.documentsDirectory();\n    let img_dir = fm.joinPath(script_dir, \"imgs\");\n    if (!fm.fileExists(img_dir)) {\n      fm.createDirectory(img_dir, true);\n    }\n    return img_dir;\n  }\n\n  \/\/ 加载图片\n  async function loadImage(name) {\n    const img_map = {\n      车: \"https:\/\/i.328888.xyz\/2023\/03\/20\/PMpHE.png\",\n      LOGO: \"https:\/\/deepal.com.cn\/202303112321\/share_logo.png\",\n      锁屏车: \"https:\/\/i.328888.xyz\/2023\/03\/27\/inBH5a.png\"\n    };\n    const user_defined_settings_name_map = {\n      车: \"car_img_path\",\n      LOGO: \"logo_img_path\",\n      背景图: \"widget_background_path\",\n    };\n    const fm = getFileManager();\n    let user_defined_img_path = getSetting(\n      user_defined_settings_name_map[name]\n    );\n    \/\/ 优先使用用户自定义的图片\n    console.log(\"加载图片:\" + name + \" \" + user_defined_img_path);\n    if (user_defined_img_path && fm.fileExists(user_defined_img_path)) {\n      try {\n        fm.downloadFileFromiCloud(user_defined_img_path);\n      } catch (e) {}\n      return fm.readImage(user_defined_img_path);\n    }\n    if (user_defined_img_path && !fm.fileExists(user_defined_img_path)) {\n      console.log(`用户自定义图片不存在:${name}`);\n      saveSetting(user_defined_settings_name_map[name], \"\");\n      user_defined_img_path = null;\n    }\n    if (!img_map[name] && !user_defined_img_path) {\n      return null;\n    }\n    const img_url = img_map[name];\n    const file_name = img_url.split(\"\/\")[img_url.split(\"\/\").length - 1];\n\n    let img_dir = getImageDir();\n\n    if (!fm.fileExists(img_dir)) {\n      fm.createDirectory(img_dir, true);\n    }\n    let img_file = fm.joinPath(img_dir, file_name + \".png\");\n\n    if (fm.fileExists(img_file)) {\n      console.log(`从本地缓存中加载图片:${name}`);\n      try {\n        fm.downloadFileFromiCloud(img_file);\n      } catch (e) {}\n    } else {\n      \/\/ download once\n      console.log(`开始下载图片:${name}`);\n      const req = new Request(img_url);\n      const img = await req.loadImage();\n      fm.writeImage(img_file, img);\n    }\n    \/\/ const user_defined_settings_key = user_defined_settings_name_map[name];\n    \/\/ const user_defined_img_path = getSetting(user_defined_settings_key);\n    \/\/ if (user_defined_img_path && fm.fileExists(user_defined_img_path)) {\n    \/\/   return fm.readImage(user_defined_img_path);\n    \/\/ } else {\n    return fm.readImage(img_file);\n    \/\/ }\n  }\n\n  function getRefreshToken() {\n    const fm = getFileManager();\n    const script_dir = fm.documentsDirectory();\n    const old_refresh_token_path = fm.joinPath(script_dir, \"refresh_token\");\n    \/\/ 处理历史遗留问题，将老版本的refresh_token文件统一用新的settings.json替代\n    if (fm.fileExists(old_refresh_token_path)) {\n      const old_refresh_token = fm.readString(old_refresh_token_path);\n      saveSetting(\"refresh_token\", old_refresh_token);\n      fm.remove(old_refresh_token_path);\n    }\n    let refresh_token = getSetting(\"refresh_token\");\n    return refresh_token;\n  }\n\n  async function getService(name, url, force_download) {\n    const fm = getFileManager();\n    const script_dir = fm.documentsDirectory();\n    let service_dir = fm.joinPath(script_dir, \"lib\/service\/\" + name);\n\n    if (!fm.fileExists(service_dir)) {\n      fm.createDirectory(service_dir, true);\n    }\n\n    let lib_file = fm.joinPath(script_dir, \"lib\/service\/\" + name + \"\/index.js\");\n\n    if (fm.fileExists(lib_file) && !force_download) {\n      try {\n        fm.downloadFileFromiCloud(lib_file);\n      } catch (e) {}\n    } else {\n      \/\/ download once\n      const req = new Request(url);\n      let indexjs = await req.load();\n      fm.write(lib_file, indexjs);\n    }\n\n    let service = importModule(\"lib\/service\/\" + name);\n\n    return service;\n  }\n\n  async function selectCarColor() {\n    const colors = [\n      {\n        name: \"星云青\",\n        img_url: \"https:\/\/i.328888.xyz\/2023\/03\/20\/PM3NF.png\",\n      },\n      {\n        name: \"月岩灰\",\n        img_url: \"https:\/\/i.328888.xyz\/2023\/03\/20\/PMrAZ.png\",\n      },\n      {\n        name: \"天河蓝\",\n        img_url: \"https:\/\/i.328888.xyz\/2023\/03\/20\/PMRhH.png\",\n      },\n      {\n        name: \"星矿黑\",\n        img_url: \"https:\/\/i.328888.xyz\/2023\/03\/20\/PMcuQ.png\",\n      },\n      {\n        name: \"彗星白\",\n        img_url: \"https:\/\/i.328888.xyz\/2023\/03\/20\/PMpHE.png\",\n      },\n    ];\n    const alert = new Alert();\n    alert.title = \"请选择车辆颜色\";\n    colors.map((color) => {\n      alert.addAction(color.name);\n    });\n    alert.addCancelAction(\"取消\");\n    const action_index = await alert.presentAlert();\n    if (action_index >= 0) {\n      const req = new Request(colors[action_index].img_url);\n      const image = await req.loadImage();\n      if (!image) {\n        console.error(\"图片素材加载失败\");\n        return;\n      }\n      const fm = getFileManager();\n      const img_dir = getImageDir();\n      const img_file_path = fm.joinPath(img_dir, \"car_img.jpg\");\n      fm.writeImage(img_file_path, image);\n      saveSetting(\"car_img_path\", img_file_path);\n    }\n  }\n\n  async function previewWidget() {\n    const alert = new Alert();\n    alert.title = \"请选择预览内容\";\n    const preview_actions = [\n      {\n        title: \"🌤️锁屏组件\",\n        action: async () => await renderAccessoryCircularWidget(),\n      },\n      {\n        title: \"📱桌面组件\",\n        action: async () => await renderMediumWidget(),\n      },\n    ];\n    preview_actions.map((action) => {\n      alert.addAction(action.title);\n    });\n    alert.addCancelAction(\"取消\");\n    await alert.presentAlert().then((action_index) => {\n      if (action_index >= 0) {\n        return preview_actions[action_index].action();\n      }\n    });\n  }\n\n  async function selectTheme() {\n    const alert = new Alert();\n    alert.title = \"请选择主题\";\n    let curr_theme = getSetting(\"theme_name\");\n    curr_theme = curr_theme ? curr_theme : \"跟随系统\";\n    themes.map((theme) => {\n      alert.addAction(\n        theme.name == curr_theme ? theme.name + \"(当前)\" : theme.name\n      );\n    });\n    alert.addCancelAction(\"取消\");\n    const selection = await alert.presentAlert();\n    if (selection >= 0) {\n      saveSetting(\"theme_name\", themes[selection].name);\n    }\n    return selection;\n  }\n\n  function getTheme() {\n    let theme_name = getSetting(\"theme_name\");\n    if (!theme_name) theme_name = \"跟随系统(渐变)\";\n    return themes.find((theme) => theme.name == theme_name);\n  }\n\n  \/\/ 获取第i个组件数据块的名称\n  function getWiegetDataSpaceName(i, is_mix) {\n    const key = \"widget_data_block_info\";\n    if (getSetting(key) && getSetting(key)[i]) {\n      return getSetting(key)[i];\n    } else {\n      \/\/ 为不同车型创建不同的默认设置：增程\/纯电\n      let default_datas = [];\n      if (is_mix) {\n        default_datas = [\"电池续航\", \"油箱续航\", \"总里程\", \"位置\"];\n      } else {\n        default_datas = [\"总里程\", \"电池续航\", \"温度\", \"位置\"];\n      }\n      saveSetting(key, default_datas);\n      return default_datas[i];\n    }\n  }\n\n  function setWidgetDataSpaceName(i, value) {\n    const key = \"widget_data_block_info\";\n    if (getSetting(key) && getSetting(key)[i]) {\n      const tmp = getSetting(key);\n      tmp[i] = value;\n      saveSetting(key, tmp);\n    }\n  }\n\n  async function selectDataForBlock(i) {\n    const data_name_list = [\n      \"电池续航\",\n      \"油箱续航\",\n      \"剩余电量\",\n      \"剩余油量\",\n      \"总里程\",\n      \"综合续航\",\n      \"温度\",\n      \"位置\",\n      \"剩余流量\",\n    ];\n    const curr_selection = getWiegetDataSpaceName(i);\n    const alert = new Alert();\n    alert.title = \"请选择第\" + (i + 1) + \"个数据块的数据\";\n    data_name_list.map((data_name) => {\n      alert.addAction(data_name == curr_selection ? data_name + \"(当前)\" : data_name);\n    });\n    alert.addCancelAction(\"取消\");\n    const selection = await alert.presentAlert();\n    if (selection >= 0) {\n      await setWidgetDataSpaceName(i, data_name_list[selection]);\n    }\n  }\n\n  async function listDataBlocks() {\n    const alert = new Alert();\n    alert.title = \"请选择数据块\";\n    alert.message = \"分别代表小组件右侧的四个数据块\"\n    const data_block_list = [1, 2, 3, 4];\n    data_block_list.map((data_block) => {\n      alert.addAction(\"第\" + data_block + \"个数据块\");\n    });\n    alert.addCancelAction(\"取消\");\n    const selection = await alert.presentAlert();\n    if (selection >= 0) {\n      if (\n        getSetting(\"widget_data_block_info\") &&\n        getSetting(\"widget_data_block_info\")[1]\n      ) {\n        await selectDataForBlock(selection);\n      } else {\n        const err_alert = new Alert();\n        err_alert.title = \"请先执行一遍预览程序\";\n        err_alert.message = \"请先执行一遍预览程序，然后再修改数据块设置\";\n      }\n    }\n  }\n\n  \/\/ 弹出操作选单，进行自定义设置\n  async function askSettings() {\n    const alert = new Alert();\n    alert.title = \"深蓝小组件设置\";\n    alert.message = \"created by @zkytech\";\n    const setting_actions = [\n      {\n        title: \"📖查看说明文档\",\n        action: async () => {\n          await Safari.open(\n            \"https:\/\/gitee.com\/zkytech\/iOS14-widgets-for-scriptable\"\n          );\n        },\n      },\n      {\n        title: \"🛠️设置refresh_token\",\n        action: async () => {\n          let my_alert = new Alert();\n          let refresh_token = getSetting(\"refresh_token\");\n          my_alert.title = \"请输入refresh_token\";\n          my_alert.addSecureTextField(\n            \"请输入refresh_token\",\n            refresh_token ? refresh_token : \"\"\n          );\n          my_alert.addCancelAction(\"取消\");\n          my_alert.addAction(\"保存\");\n          if ((await my_alert.present()) == 0) {\n            refresh_token = my_alert.textFieldValue(0);\n            \/\/ 兼容一些神奇的输入形式 ------- begin\n            if (\n              refresh_token.indexOf(\"{\") != -1 &&\n              refresh_token.indexOf(\"}\") != -1\n            ) {\n              try {\n                refresh_token = JSON.parse(\/\\{.*\\}\/.exec(refresh_token)[0])[\n                  \"refreshToken\"\n                ];\n              } catch (e) {\n                console.error(e);\n                console.error(e.stack);\n              }\n            }\n            if (refresh_token.indexOf(\"=\") != -1) {\n              refresh_token = refresh_token.split(\"=\")[1];\n            }\n            if (refresh_token.indexOf(\":\") != -1) {\n              refresh_token = refresh_token\n                .split(\":\")[1]\n                .replace('\"', \"\")\n                .replace(\",\", \"\")\n                .trim();\n            }\n\n            if (refresh_token.indexOf(\"-\") != -1) {\n              refresh_token = refresh_token.split(\"-\")[0].trim();\n            }\n            if (refresh_token != my_alert.textFieldValue(0)) {\n              console.warn(\n                \"输入Token的格式不对，程序会尝试从中提取Token，如果仍然执行失败请仔细地阅读文档。\"\n              );\n            }\n            \/\/ 兼容一些神奇的输入形式 -------- end\n            saveSetting(\"refresh_token\", refresh_token);\n            await previewWidget();\n          } else console.log(\"取消\");\n        },\n      },\n      {\n        title: \"💈选择主题\",\n        action: async () => {\n          const selection = await selectTheme();\n          if (selection >= 0) {\n            await previewWidget();\n          }\n        },\n      },\n      {\n        title: \"🌈选择车辆颜色\",\n        action: async () => {\n          await selectCarColor();\n          await previewWidget();\n        },\n      },\n      {\n        title: \"🖼️自定义背景图片\",\n        action: async () => {\n          const image = await Photos.fromLibrary();\n          if (!image) return;\n          const fm = getFileManager();\n          const img_dir = getImageDir();\n          const img_file_path = fm.joinPath(img_dir, \"widget_background.jpg\");\n          fm.writeImage(img_file_path, image);\n          saveSetting(\"widget_background_path\", img_file_path);\n          await previewWidget();\n        },\n      },\n      {\n        title: \"💬自定义车辆型号\",\n        action: async () => {\n          let my_alert = new Alert();\n          let car_series_name = getSetting(\"car_series_name\");\n          my_alert.title = \"请输入车辆型号\";\n          my_alert.addTextField(\n            \"请输入车辆型号\",\n            car_series_name ? car_series_name : \"\"\n          );\n          my_alert.addCancelAction(\"取消\");\n          my_alert.addAction(\"保存\");\n          if ((await my_alert.present()) == 0) {\n            car_series_name = my_alert.textFieldValue(0);\n            saveSetting(\"car_series_name\", car_series_name);\n            await previewWidget();\n          } else console.log(\"取消\");\n        },\n      },\n      {\n        title: \"🚙自定义车辆图片\",\n        action: async () => {\n          const image = await Photos.fromLibrary();\n          if (!image) return;\n          const fm = getFileManager();\n          const img_dir = getImageDir();\n          const img_file_path = fm.joinPath(img_dir, \"car_img.jpg\");\n          fm.writeImage(img_file_path, image);\n          saveSetting(\"car_img_path\", img_file_path);\n          await previewWidget();\n        },\n      },\n      {\n        title: \"🎉自定义LOGO图片\",\n        action: async () => {\n          const image = await Photos.fromLibrary();\n          if (!image) return;\n          const fm = getFileManager();\n          const img_dir = getImageDir();\n          const img_file_path = fm.joinPath(img_dir, \"logo.jpg\");\n          fm.writeImage(img_file_path, image);\n          saveSetting(\"logo_img_path\", img_file_path);\n          await previewWidget();\n        },\n      },\n      {\n        title: \"⌗自定义数据块\",\n        action: async () => {\n          await listDataBlocks();\n          await previewWidget();\n        },\n      },\n\n      {\n        title: \"♻️重置设定(保留token)\",\n        action: async () => {\n          initSettings();\n          await previewWidget();\n        },\n      },\n      {\n        title: \"👀预览\",\n        action: async () => {\n          await previewWidget();\n        },\n      },\n    ];\n    setting_actions.map((action) => {\n      alert.addAction(action.title);\n    });\n    alert.addCancelAction(\"取消\");\n    await alert.presentAlert().then((action_index) => {\n      if (action_index >= 0) {\n        return setting_actions[action_index].action();\n      }\n    });\n  }\n\n  function resetSettings() {\n    saveSetting(\"logo_img_path\", \"\");\n    saveSetting(\"car_img_path\", \"\");\n    saveSetting(\"car_series_name\", \"\");\n    saveSetting(\"widget_background_path\", \"\");\n    saveSetting(\"theme_name\", \"跟随系统(渐变)\");\n    saveSetting(\"widget_data_block_info\", null);\n  }\n} catch (e) {\n  console.error(e);\n  console.error(e.stack);\n}\n",
  "share_sheet_inputs" : [

  ]
}